Search.setIndex({"docnames": ["algorithms", "algorithms.ciphers", "algorithms.numbers", "algorithms.strings", "data", "index", "modules", "tests", "tests.ciphers", "tests.numbers", "tests.strings"], "filenames": ["algorithms.rst", "algorithms.ciphers.rst", "algorithms.numbers.rst", "algorithms.strings.rst", "data.rst", "index.rst", "modules.rst", "tests.rst", "tests.ciphers.rst", "tests.numbers.rst", "tests.strings.rst"], "titles": ["algorithms package", "algorithms.ciphers package", "algorithms.numbers package", "algorithms.strings package", "data package", "Welcome to Algorithms Documentation\u2019s documentation!", "algorithms", "tests package", "tests.ciphers package", "tests.numbers package", "tests.strings package"], "terms": {"cipher": [0, 6, 7], "caesar": [0, 6], "caesarciph": [0, 1], "decrypt_text": [0, 1], "encrypt_text": [0, 1], "sequenc": [0, 1], "shift": [0, 1], "mors": [0, 6], "morseciph": [0, 1], "decrypt": [0, 1], "encrypt": [0, 1], "morse_cod": [0, 1], "vigener": [0, 6], "vigenereciph": [0, 1], "kei": [0, 1], "vigenere_gener": [0, 1], "number": [0, 1, 3, 4, 6, 7], "arithmetic_algorithm": [0, 6], "babylonian_sqrt": [0, 2], "binary_exponenti": [0, 2], "binary_search": [0, 2], "iterative_factori": [0, 2], "recursive_factori": [0, 2], "digit": [0, 6], "get_digit": [0, 2], "move_zero": [0, 2], "sum_digit": [0, 2], "divisor": [0, 6], "count_comomon_divisor": [0, 2], "count_divisor": [0, 2], "sum_divisor": [0, 2], "function_algorithm": [0, 6], "bisection_root_find": [0, 2], "horner_evalu": [0, 2], "quadratic_roots_find": [0, 2], "rectangle_integr": [0, 2], "trapezoidal_integr": [0, 2], "geometric_algorithm": [0, 6], "point": [0, 2, 4], "x": [0, 1, 2, 9], "y": [0, 1, 2], "are_points_collinear": [0, 2], "distance_between_point": [0, 2], "is_triangle_rectangular": [0, 2], "is_triangle_valid": [0, 2], "num_base_convers": [0, 6], "any_to_decim": [0, 2], "binary_to_hexadecim": [0, 2], "binary_to_oct": [0, 2], "decimal_to_ani": [0, 2], "decimal_to_hexadecim": [0, 2], "hexadecimal_to_binari": [0, 2], "hexadecimal_to_decim": [0, 2], "hexadecimal_to_oct": [0, 2], "octal_to_binari": [0, 2], "octal_to_hexadecim": [0, 2], "prime": [0, 6], "erastothenessiev": [0, 2], "is_prim": [0, 2], "get_prime_factor": [0, 2], "is_perfect_numb": [0, 2], "is_prime_bas": [0, 2], "string": [0, 4, 6, 7], "custom_string_sort": [0, 6], "compare_chars_sum": [0, 3], "compare_vowels_count": [0, 3], "sort_item": [0, 3], "string_analysi": [0, 6], "contains_dupl": [0, 3], "count_substring_occur": [0, 3], "is_anagram": [0, 3], "is_palindrom": [0, 3], "is_pangram": [0, 3], "is_potential_palindrom": [0, 3], "is_subsequ": [0, 3], "is_substr": [0, 3], "string_manipul": [0, 6], "custom_join": [0, 3], "lower_str": [0, 3], "reverse_str": [0, 3], "string_compress": [0, 3], "upper_str": [0, 3], "class": [0, 1, 2, 7, 8, 9, 10], "bubblesort": [0, 6], "sourc": [0, 1, 2, 3, 4, 7, 8, 9, 10], "base": [0, 1, 2, 3, 4, 7, 8, 9, 10], "A": [0, 1, 2, 3, 4, 8, 10], "implement": [0, 1], "data": [0, 5, 6], "list": [0, 2, 3, 4], "ani": [0, 3], "us": [0, 1, 2, 3, 4], "paramet": [0, 1, 2, 3, 4], "The": [0, 1, 2, 3, 4], "element": [0, 2, 3], "return": [0, 1, 2, 3, 4], "mergesort": [0, 6], "static": [0, 9], "merg": [0, 6], "left_half": 0, "int": [0, 1, 2, 3, 4, 9], "right_half": 0, "two": [0, 2, 3], "singl": 0, "left": [0, 2, 4], "half": 0, "split": 0, "right": [0, 2, 4], "quicksort": [0, 6], "divid": [0, 2], "conquer": 0, "selectionsort": [0, 6], "abc": [0, 8], "an": [0, 1, 2, 3, 4], "abstract": 0, "sortingmanag": [0, 6], "sorting_strategi": [0, 6], "object": [0, 1, 2, 7, 8, 9, 10], "manag": 0, "strategi": 0, "perform": [0, 2], "specifi": [0, 2, 3, 4], "perform_sort": [0, 6], "current": 0, "set_sorting_strategi": [0, 6], "set": [0, 8, 9], "3": [1, 2, 9], "simpl": 1, "substitut": 1, "where": [1, 4], "each": [1, 2, 3], "letter": [1, 3, 4], "plaintext": 1, "i": [1, 2, 3, 4], "certain": 1, "place": 1, "down": 1, "up": [1, 8, 9], "alphabet": [1, 3], "attribut": 1, "str": [1, 2, 3, 4], "charact": [1, 3], "repres": [1, 2, 3], "default": [1, 2, 3, 4], "ascii": [1, 3], "uppercas": [1, 3], "posit": [1, 2, 3, 9], "encrypted_text": 1, "given": [1, 2, 3, 4], "text": [1, 3, 4, 8, 10], "param": [1, 2, 4], "classvar": 1, "abcdefghijklmnopqrstuvwxyz": 1, "code": 1, "dict": 1, "dictionari": 1, "obtain": 1, "origin": 1, "rais": [1, 2, 3, 4], "valueerror": [1, 2, 3], "present": [1, 3], "revers": [1, 3], "input": [1, 2], "0": [1, 2, 3, 8, 9], "1": [1, 2, 8, 9], "2": [1, 2, 8, 9], "4": [1, 9], "5": [1, 8, 9], "6": [1, 2, 9], "7": 1, "8": [1, 2, 9], "9": 1, "b": [1, 2], "c": [1, 2], "d": 1, "e": [1, 8], "f": 1, "g": 1, "h": 1, "j": 1, "k": [1, 8], "l": 1, "m": 1, "n": [1, 2, 4], "o": 1, "p": 1, "q": 1, "r": 1, "": [1, 2, 8], "t": 1, "u": 1, "v": 1, "w": [1, 2], "z": [1, 4], "_vigeneregener": 1, "_vigeneresquaregener": 1, "It": 1, "determin": [1, 2], "row": 1, "squar": [1, 2], "instanc": 1, "gener": 1, "provid": [1, 4], "accuraci": 2, "float": [2, 4, 9], "001": 2, "calcul": 2, "root": 2, "babylonian": 2, "method": [2, 8, 9], "which": [2, 3], "level": 2, "precis": 2, "approxim": 2, "power": [2, 9], "comput": 2, "result": [2, 3], "binari": 2, "exponenti": 2, "expon": 2, "looked_numb": [2, 9], "bool": [2, 3, 4], "search": [2, 3, 5], "find": 2, "index": [2, 5], "look": 2, "sort": [2, 3, 6], "integ": [2, 3], "found": [2, 3], "If": [2, 3, 4], "fals": [2, 3, 4, 9, 10], "factori": 2, "non": [2, 3], "neg": [2, 3], "iter": 2, "approach": 2, "recurs": 2, "get": 2, "from": [2, 3, 4], "extract": 2, "retriev": [2, 4], "num": 2, "move": 2, "all": [2, 3], "zero": 2, "end": [2, 4], "maintain": 2, "order": 2, "other": [2, 3], "sum": [2, 3], "common": 2, "first": [2, 3, 4], "second": [2, 3], "count": [2, 3], "n_includ": 2, "true": [2, 3, 4, 9, 10], "indic": [2, 3], "whether": 2, "taken": 2, "account": 2, "when": 2, "infin": 2, "func": 2, "callabl": [2, 3, 4], "toler": 2, "1e": 2, "06": 2, "max_iter": 2, "100": [2, 9], "function": [2, 3, 4, 9], "within": [2, 3], "interv": 2, "bisect": 2, "endpoint": 2, "accept": 2, "error": 2, "akceptowalni": 2, "poziom": 2, "bledu": 2, "lub": 2, "precyzji": 2, "wyniku": 2, "obliczen": 2, "maximum": 2, "flaot": 2, "valueerrpr": 2, "ha": [2, 3], "same": [2, 3], "sign": 2, "both": [2, 3], "coeffici": [2, 9], "evalu": 2, "polynomi": [2, 7, 9], "specifiec": 2, "valu": [2, 3, 9], "often": 2, "check": [2, 3, 4], "equat": 2, "tupl": 2, "complex": 2, "quadrat": 2, "ax": 2, "bx": 2, "constant": 2, "term": 2, "commplex": 2, "contain": [2, 3, 4], "can": [2, 3], "definit": 2, "integr": 2, "rectangl": 2, "rule": 2, "In": 2, "word": [2, 3], "area": 2, "under": 2, "curv": 2, "total": 2, "smaller": 2, "callanl": 2, "lower": 2, "limit": 2, "upper": 2, "estim": 2, "trapezoid": 2, "point1": 2, "point2": 2, "point3": 2, "three": 2, "ar": [2, 3, 4], "collinear": 2, "third": 2, "otherwis": [2, 3, 4], "p1": [2, 9], "p2": [2, 9], "distanc": 2, "between": [2, 3], "dimension": 2, "plane": 2, "s1": [2, 9], "s2": [2, 9], "s3": [2, 9], "triangl": 2, "side": 2, "length": 2, "angl": 2, "form": [2, 3], "valid": [2, 6], "num_str": 2, "convert": [2, 3], "its": [2, 4], "decim": 2, "represent": 2, "must": 2, "binary_num": 2, "hexadecim": 2, "octal": 2, "hex_num": 2, "hexadecimal_str": 2, "erastothen": 2, "siev": 2, "anoth": 2, "out": 2, "rang": [2, 4], "factor": 2, "greater": [2, 3], "than": [2, 3], "mai": 2, "appear": 2, "more": [2, 3], "onc": [2, 3], "depend": 2, "multipl": 2, "perfect": 2, "text1": 3, "text2": 3, "compar": 3, "differ": 3, "comparison": 3, "less": 3, "have": 3, "vowel": 3, "fewer": 3, "item": [3, 4, 10], "sorting_fn": 3, "custom": 3, "take": 3, "argument": 3, "thi": 3, "defin": 3, "logic": 3, "new": 3, "accord": [3, 4], "duplic": 3, "substr": [3, 10], "occurr": 3, "anagram": 3, "phrase": 3, "rearrang": 3, "arg": [3, 4], "palindrom": 3, "after": [3, 9], "lowercas": [3, 4], "remov": 3, "alphanumer": 3, "read": 3, "forward": 3, "backward": 3, "pangram": 3, "sentenc": 3, "everi": 3, "least": 3, "potenti": 3, "subsequ": 3, "separ": 3, "concaten": 3, "join": 3, "compress": 3, "rand_chr": [4, 6], "min_c": 4, "max_c": 4, "char": 4, "min_chr": 4, "max_chr": 4, "rand_chr_until": [4, 6], "condition_fn": 4, "teh": 4, "until": 4, "met": 4, "condit": 4, "satisfi": 4, "rand_n_numb": [4, 6], "min_n": 4, "max_n": 4, "itm": 4, "rand_n_numbers_until": [4, 6], "meet": 4, "rand_numb": [4, 6], "rand_number_until": [4, 6], "get_n_numb": [4, 6], "data_typ": 4, "type": 4, "tpye": 4, "being": 4, "get_n_numbers_loop": [4, 6], "long": 4, "thei": 4, "format": 4, "get_numb": [4, 6], "messag": 4, "get_number_loop": [4, 6], "get_number_matches_regex": [4, 6], "regex": 4, "none": 4, "whose": 4, "match": 4, "pattern": 4, "retrievec": 4, "get_number_matches_regex_loop": [4, 6], "interg": 4, "accorgind": 4, "get_str": [4, 6], "does_char_fall_within_rang": [4, 6], "min_char": 4, "max_char": 4, "does_number_match_regex": [4, 6], "regular": 4, "express": 4, "option": 4, "against": 4, "typeerror": 4, "does_string_match_regex": [4, 6], "follow": 4, "specif": 4, "name": 4, "convent": 4, "capit": 4, "rest": 4, "is_credit_card_valid": [4, 6], "card_numb": 4, "credit": 4, "card": 4, "luhn": 4, "algorithm": 4, "packag": [5, 6], "test": [5, 6], "modul": [5, 6], "page": 5, "subpackag": 6, "submodul": 6, "content": 6, "randomm": 6, "user": 6, "test_caesar": [6, 7], "test_mors": [6, 7], "test_vigener": [6, 7], "test_arithmetic_algorithm": [6, 7], "test_digit": [6, 7], "test_divisor": [6, 7], "test_function_algorithm": [6, 7], "test_geometric_algorithm": [6, 7], "test_num_base_convers": [6, 7], "test_prim": [6, 7], "test_custom_string_sort": [6, 7], "test_string_analysi": [6, 7], "test_string_manipul": [6, 7], "conftest": 6, "ge_0_number_and_expected_factorial_result": [6, 7, 9], "items_and_expected_sorted_item": [6, 7], "palindrome_and_potential_palindrom": [6, 7, 10], "test_sort": 6, "testsortingalgorithm": [6, 7], "testsortingmanag": [6, 7], "test_perform_sort": [6, 7], "test_set_sorting_strategi": [6, 7], "testcaesarwithcustomshift": [7, 8], "test_cas": [7, 8, 9, 10], "test_decrypt": [7, 8], "test_encypt": [7, 8], "testcaesarwithdefaultshift": [7, 8], "setupclass": [7, 8, 9], "test_encrypt": [7, 8], "testmors": [7, 8], "morse_encoded_text": [7, 8], "testvigenerewithcustomkey2": [7, 8], "testvigenerewithdefaultkey2": [7, 8], "testbabyloniansqrt": [7, 9], "number_accuracy_and_expected_sqrt_result": [7, 9], "number_and_expected_sqrt_result_with_default_accuraci": [7, 9], "test_with_custom_accuraci": [7, 9], "test_with_default_accuraci": [7, 9], "testbinaryexponenti": [7, 9], "test_binary_exponenti": [7, 9], "testbinarysearch": [7, 9], "test_binary_search": [7, 9], "testfactori": [7, 9], "test_iterative_with_ge_0_numb": [7, 9], "test_iterative_with_negative_numb": [7, 9], "test_recursive_with_ge_0_numb": [7, 9], "test_recursive_with_negative_numb": [7, 9], "testgetdigit": [7, 9], "test_get_digit": [7, 9], "testmovezero": [7, 9], "numbers_and_expected_result_after_moving_zero": [7, 9], "test_move_zero": [7, 9], "testsumdigit": [7, 9], "number_and_expected_sum": [7, 9], "test_sum_digit": [7, 9], "testcountcommondivisor": [7, 9], "test_count_common_divisor": [7, 9], "testcountdivisor": [7, 9], "number_and_divisor_count": [7, 9], "test_positive_numb": [7, 9], "testsumdivisor": [7, 9], "setup": [7, 9], "teardown": [7, 9], "test_negative_numbers_divisors_sum_excluding_numb": [7, 9], "test_negative_numbers_divisors_sum_including_numb": [7, 9], "test_positive_numbers_divisors_sum_excluding_numb": [7, 9], "test_positive_numbers_divisors_sum_including_numb": [7, 9], "test_when_number_equals_zero": [7, 9], "testbisectionrootfinder2": [7, 9], "linear_fn": [7, 9], "quadratic_fn": [7, 9], "test_when_not_correct": [7, 9], "test_with_correct_data": [7, 9], "testhornerevalu": [7, 9], "test_various_cas": [7, 9], "testintegr": [7, 9], "polynomial_fn": [7, 9], "test_integr": [7, 9], "testquadraticrootsfind": [7, 9], "test_correct_roots_calcul": [7, 9], "test_when_a_coefficient_equals_0": [7, 9], "testpointsgeometrytest": [7, 9], "test_are_points_collinear": [7, 9], "test_calculate_distance_between_point": [7, 9], "testtriangleproperti": [7, 9], "test_is_triangle_rectangular": [7, 9], "test_is_triangle_valid": [7, 9], "testbinaryhexadecimalconvers": [7, 9], "conversion_binary_hex_paramet": [7, 9], "test_binary_to_hexadecim": [7, 9], "test_hexadecimal_to_binari": [7, 9], "testbinaryoctalconvers": [7, 9], "conversion_binary_octal_paramet": [7, 9], "test_binary_to_oct": [7, 9], "test_octal_to_binari": [7, 9], "testdecimalbinaryoctalconvers": [7, 9], "conversion_decimal_any_paramet": [7, 9], "test_any_to_decim": [7, 9], "test_any_to_decimal_with_uncorrect_bas": [7, 9], "test_decimal_to_ani": [7, 9], "test_decimal_to_any_with_uncorrect_bas": [7, 9], "testdecimalhexadecimalconvers": [7, 9], "coversion_decimal_hex_paramet": [7, 9], "test_decimal_to_hexadecim": [7, 9], "test_hexadecimal_to_decim": [7, 9], "testoctalhexadecimalconvers": [7, 9], "conversion_octal_hex_paramet": [7, 9], "test_hexadecimal_to_oct": [7, 9], "test_octal_to_hexadecim": [7, 9], "testerastothenessiev": [7, 9], "test_invalid_input_for_sieve_cr": [7, 9], "test_is_prim": [7, 9], "test_is_prime_with_number_out_of_rang": [7, 9], "testprimefunct": [7, 9], "test_get_prime_factor": [7, 9], "test_get_prime_factors_with_invalid_input": [7, 9], "testsortitem": [7, 10], "test_sort_items_with_compare_vowels_count_fn": [7, 10], "test_with_compare_chars_sum_fn": [7, 10], "testcontainsdupl": [7, 10], "duplicate_el": [7, 10], "test_with_dupl": [7, 10], "test_with_unique_el": [7, 10], "unique_el": [7, 10], "testcountsubstringoccur": [7, 10], "test_substring_occur": [7, 10], "testisanagram": [7, 10], "test_is_anagram": [7, 10], "testispangram": [7, 10], "test_is_pangram": [7, 10], "testpalindromefunct": [7, 10], "test_palindrome_and_potential_palindrom": [7, 10], "test_potential_palindrome_but_not_actual_palindrom": [7, 10], "testsubsequenceandsubstr": [7, 10], "test_is_subsequ": [7, 10], "test_is_substr": [7, 10], "text_potential_subsequence_and_result": [7, 10], "text_potential_substring_and_result": [7, 10], "testcompress": [7, 10], "test_string_compress": [7, 10], "testcustomjoin": [7, 10], "test_when_any_element_is_not_str": [7, 10], "test_with_valid_data": [7, 10], "words_and_separator_fixtur": [7, 10], "testrevers": [7, 10], "test_reverse_str": [7, 10], "words_for_revers": [7, 10], "request": [7, 8, 9, 10], "sorting_algorithm": 7, "methodnam": [8, 9, 10], "runtest": [8, 9, 10], "testcas": [8, 9, 10], "xyz": 8, "yza": 8, "ghi": 8, "efg": 8, "123": 8, "10": [8, 9], "g4hi": 8, "l4mn": 8, "classmethod": [8, 9], "hook": [8, 9], "fixtur": [8, 9], "befor": [8, 9], "run": [8, 9], "def": 8, "jkl": 8, "j4kl": 8, "kayak": 8, "son": 8, "colsi": 8, "waterfal": 8, "peqx": 8, "bcd": 8, "ceg": 8, "mud": 8, "univers": 8, "leaf": 8, "friapvsnec": 8, "uewko": 8, "garden": 8, "qepnil": 8, "kfa": 8, "ergfipcmri": 8, "expected_result": [9, 10], "number1": 9, "number2": 9, "expected_common_divisors_count": 9, "exercis": 9, "deconstruct": 9, "staticmethod": 9, "13": 9, "16": 9, "200": 9, "12": 9, "150": 9, "93": 9, "33": 9, "180": 9, "68": 9, "67": 9, "expected_root": 9, "p3": 9, "expected_collinear": 9, "expected_dist": 9, "18": 9, "41": 9, "expected_prime_factor": 9, "expected_is_prim": 9, "expected_sorted_item": 10, "expected_count": 10, "meat": 10, "team": 10, "saw": 10, "sam": 10, "cat": 10, "expected_compressed_text": 10, "hello": 10, "world": 10, "kajak": 10}, "objects": {"": [[0, 0, 0, "-", "algorithms"], [4, 0, 0, "-", "data"], [7, 0, 0, "-", "tests"]], "algorithms": [[1, 0, 0, "-", "ciphers"], [2, 0, 0, "-", "numbers"], [0, 0, 0, "-", "sorting"], [3, 0, 0, "-", "strings"]], "algorithms.ciphers": [[1, 0, 0, "-", "caesar"], [1, 0, 0, "-", "morse"], [1, 0, 0, "-", "vigenere"]], "algorithms.ciphers.caesar": [[1, 1, 1, "", "CaesarCipher"]], "algorithms.ciphers.caesar.CaesarCipher": [[1, 2, 1, "", "decrypt_text"], [1, 2, 1, "", "encrypt_text"], [1, 3, 1, "", "sequence"], [1, 3, 1, "", "shift"]], "algorithms.ciphers.morse": [[1, 1, 1, "", "MorseCipher"]], "algorithms.ciphers.morse.MorseCipher": [[1, 2, 1, "", "decrypt"], [1, 2, 1, "", "encrypt"], [1, 3, 1, "", "morse_code"]], "algorithms.ciphers.vigenere": [[1, 1, 1, "", "VigenereCipher"]], "algorithms.ciphers.vigenere.VigenereCipher": [[1, 2, 1, "", "decrypt"], [1, 2, 1, "", "encrypt"], [1, 3, 1, "", "key"], [1, 3, 1, "", "vigenere_generator"]], "algorithms.numbers": [[2, 0, 0, "-", "arithmetic_algorithms"], [2, 0, 0, "-", "digits"], [2, 0, 0, "-", "divisors"], [2, 0, 0, "-", "function_algorithms"], [2, 0, 0, "-", "geometric_algorithms"], [2, 0, 0, "-", "num_base_conversion"], [2, 0, 0, "-", "primes"]], "algorithms.numbers.arithmetic_algorithms": [[2, 4, 1, "", "babylonian_sqrt"], [2, 4, 1, "", "binary_exponentiation"], [2, 4, 1, "", "binary_search"], [2, 4, 1, "", "iterative_factorial"], [2, 4, 1, "", "recursive_factorial"]], "algorithms.numbers.digits": [[2, 4, 1, "", "get_digit"], [2, 4, 1, "", "move_zeroes"], [2, 4, 1, "", "sum_digits"]], "algorithms.numbers.divisors": [[2, 4, 1, "", "count_comomon_divisors"], [2, 4, 1, "", "count_divisors"], [2, 4, 1, "", "sum_divisors"]], "algorithms.numbers.function_algorithms": [[2, 4, 1, "", "bisection_root_finder"], [2, 4, 1, "", "horner_evaluation"], [2, 4, 1, "", "quadratic_roots_finder"], [2, 4, 1, "", "rectangle_integration"], [2, 4, 1, "", "trapezoidal_integration"]], "algorithms.numbers.geometric_algorithms": [[2, 1, 1, "", "Point"], [2, 4, 1, "", "are_points_collinear"], [2, 4, 1, "", "distance_between_points"], [2, 4, 1, "", "is_triangle_rectangular"], [2, 4, 1, "", "is_triangle_valid"]], "algorithms.numbers.geometric_algorithms.Point": [[2, 3, 1, "", "x"], [2, 3, 1, "", "y"]], "algorithms.numbers.num_base_conversion": [[2, 4, 1, "", "any_to_decimal"], [2, 4, 1, "", "binary_to_hexadecimal"], [2, 4, 1, "", "binary_to_octal"], [2, 4, 1, "", "decimal_to_any"], [2, 4, 1, "", "decimal_to_hexadecimal"], [2, 4, 1, "", "hexadecimal_to_binary"], [2, 4, 1, "", "hexadecimal_to_decimal"], [2, 4, 1, "", "hexadecimal_to_octal"], [2, 4, 1, "", "octal_to_binary"], [2, 4, 1, "", "octal_to_hexadecimal"]], "algorithms.numbers.primes": [[2, 1, 1, "", "ErastothenesSieve"], [2, 4, 1, "", "get_prime_factors"], [2, 4, 1, "", "is_perfect_number"], [2, 4, 1, "", "is_prime_basic"]], "algorithms.numbers.primes.ErastothenesSieve": [[2, 2, 1, "", "is_prime"]], "algorithms.sorting": [[0, 1, 1, "", "BubbleSort"], [0, 1, 1, "", "MergeSort"], [0, 1, 1, "", "QuickSort"], [0, 1, 1, "", "SelectionSort"], [0, 1, 1, "", "Sorting"], [0, 1, 1, "", "SortingManager"]], "algorithms.sorting.BubbleSort": [[0, 2, 1, "", "sort"]], "algorithms.sorting.MergeSort": [[0, 2, 1, "", "merge"], [0, 2, 1, "", "sort"]], "algorithms.sorting.QuickSort": [[0, 2, 1, "", "sort"]], "algorithms.sorting.SelectionSort": [[0, 2, 1, "", "sort"]], "algorithms.sorting.Sorting": [[0, 2, 1, "", "sort"]], "algorithms.sorting.SortingManager": [[0, 2, 1, "", "perform_sorting"], [0, 2, 1, "", "set_sorting_strategy"], [0, 3, 1, "", "sorting_strategy"]], "algorithms.strings": [[3, 0, 0, "-", "custom_string_sorting"], [3, 0, 0, "-", "string_analysis"], [3, 0, 0, "-", "string_manipulation"]], "algorithms.strings.custom_string_sorting": [[3, 4, 1, "", "compare_chars_sum"], [3, 4, 1, "", "compare_vowels_count"], [3, 4, 1, "", "sort_items"]], "algorithms.strings.string_analysis": [[3, 4, 1, "", "contains_duplicates"], [3, 4, 1, "", "count_substring_occurences"], [3, 4, 1, "", "is_anagram"], [3, 4, 1, "", "is_palindrome"], [3, 4, 1, "", "is_pangram"], [3, 4, 1, "", "is_potential_palindrome"], [3, 4, 1, "", "is_subsequence"], [3, 4, 1, "", "is_substring"]], "algorithms.strings.string_manipulation": [[3, 4, 1, "", "custom_join"], [3, 4, 1, "", "lower_string"], [3, 4, 1, "", "reverse_string"], [3, 4, 1, "", "string_compression"], [3, 4, 1, "", "upper_string"]], "data": [[4, 0, 0, "-", "randomm"], [4, 0, 0, "-", "user"], [4, 0, 0, "-", "validation"]], "data.randomm": [[4, 4, 1, "", "rand_chr"], [4, 4, 1, "", "rand_chr_until"], [4, 4, 1, "", "rand_n_numbers"], [4, 4, 1, "", "rand_n_numbers_until"], [4, 4, 1, "", "rand_number"], [4, 4, 1, "", "rand_number_until"]], "data.user": [[4, 4, 1, "", "get_n_numbers"], [4, 4, 1, "", "get_n_numbers_loop"], [4, 4, 1, "", "get_number"], [4, 4, 1, "", "get_number_loop"], [4, 4, 1, "", "get_number_matches_regex"], [4, 4, 1, "", "get_number_matches_regex_loop"], [4, 4, 1, "", "get_str"]], "data.validation": [[4, 4, 1, "", "does_char_fall_within_range"], [4, 4, 1, "", "does_number_match_regex"], [4, 4, 1, "", "does_string_match_regex"], [4, 4, 1, "", "is_credit_card_valid"]], "tests": [[8, 0, 0, "-", "ciphers"], [7, 0, 0, "-", "conftest"], [9, 0, 0, "-", "numbers"], [10, 0, 0, "-", "strings"], [7, 0, 0, "-", "test_sorting"]], "tests.ciphers": [[8, 0, 0, "-", "test_caesar"], [8, 0, 0, "-", "test_morse"], [8, 0, 0, "-", "test_vigenere"]], "tests.ciphers.test_caesar": [[8, 1, 1, "", "TestCaesarWithCustomShift"], [8, 1, 1, "", "TestCaesarWithDefaultShift"]], "tests.ciphers.test_caesar.TestCaesarWithCustomShift": [[8, 3, 1, "", "test_cases"], [8, 2, 1, "", "test_decrypt"], [8, 2, 1, "", "test_encypt"]], "tests.ciphers.test_caesar.TestCaesarWithDefaultShift": [[8, 2, 1, "", "setUpClass"], [8, 3, 1, "", "test_cases"], [8, 2, 1, "", "test_decrypt"], [8, 2, 1, "", "test_encrypt"]], "tests.ciphers.test_morse": [[8, 1, 1, "", "TestMorse"]], "tests.ciphers.test_morse.TestMorse": [[8, 2, 1, "", "morse_encoded_text"], [8, 2, 1, "", "test_decrypt"], [8, 2, 1, "", "test_encrypt"]], "tests.ciphers.test_vigenere": [[8, 1, 1, "", "TestVigenereWithCustomKey2"], [8, 1, 1, "", "TestVigenereWithDefaultKey2"]], "tests.ciphers.test_vigenere.TestVigenereWithCustomKey2": [[8, 3, 1, "", "test_cases"], [8, 2, 1, "", "test_decrypt"], [8, 2, 1, "", "test_encrypt"]], "tests.ciphers.test_vigenere.TestVigenereWithDefaultKey2": [[8, 2, 1, "", "setUpClass"], [8, 3, 1, "", "test_cases"], [8, 2, 1, "", "test_decrypt"], [8, 2, 1, "", "test_encrypt"]], "tests.conftest": [[7, 4, 1, "", "ge_0_number_and_expected_factorial_result"], [7, 4, 1, "", "items_and_expected_sorted_items"], [7, 4, 1, "", "palindrome_and_potential_palindrome"]], "tests.numbers": [[9, 0, 0, "-", "test_arithmetic_algorithms"], [9, 0, 0, "-", "test_digits"], [9, 0, 0, "-", "test_divisors"], [9, 0, 0, "-", "test_function_algorithms"], [9, 0, 0, "-", "test_geometric_algorithms"], [9, 0, 0, "-", "test_num_base_conversion"], [9, 0, 0, "-", "test_primes"]], "tests.numbers.test_arithmetic_algorithms": [[9, 1, 1, "", "TestBabylonianSqrt"], [9, 1, 1, "", "TestBinaryExponentiation"], [9, 1, 1, "", "TestBinarySearch"], [9, 1, 1, "", "TestFactorials"]], "tests.numbers.test_arithmetic_algorithms.TestBabylonianSqrt": [[9, 2, 1, "", "number_accuracy_and_expected_sqrt_result"], [9, 2, 1, "", "number_and_expected_sqrt_result_with_default_accuracy"], [9, 2, 1, "", "test_with_custom_accuracy"], [9, 2, 1, "", "test_with_default_accuracy"]], "tests.numbers.test_arithmetic_algorithms.TestBinaryExponentiation": [[9, 2, 1, "", "test_binary_exponentiation"]], "tests.numbers.test_arithmetic_algorithms.TestBinarySearch": [[9, 2, 1, "", "test_binary_search"]], "tests.numbers.test_arithmetic_algorithms.TestFactorials": [[9, 2, 1, "", "test_iterative_with_ge_0_number"], [9, 2, 1, "", "test_iterative_with_negative_number"], [9, 2, 1, "", "test_recursive_with_ge_0_number"], [9, 2, 1, "", "test_recursive_with_negative_number"]], "tests.numbers.test_digits": [[9, 1, 1, "", "TestGetDigit"], [9, 1, 1, "", "TestMoveZeroes"], [9, 1, 1, "", "TestSumDigits"]], "tests.numbers.test_digits.TestGetDigit": [[9, 2, 1, "", "test_get_digit"]], "tests.numbers.test_digits.TestMoveZeroes": [[9, 2, 1, "", "numbers_and_expected_result_after_moving_zeroes"], [9, 2, 1, "", "test_move_zeroes"]], "tests.numbers.test_digits.TestSumDigits": [[9, 2, 1, "", "number_and_expected_sum"], [9, 2, 1, "", "test_sum_digits"]], "tests.numbers.test_divisors": [[9, 1, 1, "", "TestCountCommonDivisors"], [9, 1, 1, "", "TestCountDivisors"], [9, 1, 1, "", "TestSumDivisors"]], "tests.numbers.test_divisors.TestCountCommonDivisors": [[9, 2, 1, "", "test_count_common_divisors"]], "tests.numbers.test_divisors.TestCountDivisors": [[9, 2, 1, "", "number_and_divisor_count"], [9, 2, 1, "", "test_positive_numbers"]], "tests.numbers.test_divisors.TestSumDivisors": [[9, 2, 1, "", "setUp"], [9, 2, 1, "", "tearDown"], [9, 2, 1, "", "test_negative_numbers_divisors_sum_excluding_number"], [9, 2, 1, "", "test_negative_numbers_divisors_sum_including_number"], [9, 2, 1, "", "test_positive_numbers_divisors_sum_excluding_number"], [9, 2, 1, "", "test_positive_numbers_divisors_sum_including_number"], [9, 2, 1, "", "test_when_number_equals_zero"]], "tests.numbers.test_function_algorithms": [[9, 1, 1, "", "TestBisectionRootFinder2"], [9, 1, 1, "", "TestHornerEvaluation"], [9, 1, 1, "", "TestIntegration"], [9, 1, 1, "", "TestQuadraticRootsFinder"]], "tests.numbers.test_function_algorithms.TestBisectionRootFinder2": [[9, 2, 1, "", "linear_fn"], [9, 2, 1, "", "polynomial"], [9, 2, 1, "", "quadratic_fn"], [9, 3, 1, "", "test_cases"], [9, 2, 1, "", "test_when_not_correct"], [9, 2, 1, "", "test_with_correct_data"]], "tests.numbers.test_function_algorithms.TestHornerEvaluation": [[9, 2, 1, "", "test_various_cases"]], "tests.numbers.test_function_algorithms.TestIntegration": [[9, 2, 1, "", "linear_fn"], [9, 2, 1, "", "polynomial_fn"], [9, 2, 1, "", "quadratic_fn"], [9, 3, 1, "", "test_cases"], [9, 2, 1, "", "test_integration"]], "tests.numbers.test_function_algorithms.TestQuadraticRootsFinder": [[9, 2, 1, "", "test_correct_roots_calculation"], [9, 2, 1, "", "test_when_a_coefficient_equals_0"]], "tests.numbers.test_geometric_algorithms": [[9, 1, 1, "", "TestPointsGeometryTester"], [9, 1, 1, "", "TestTriangleProperties"]], "tests.numbers.test_geometric_algorithms.TestPointsGeometryTester": [[9, 2, 1, "", "test_are_points_collinear"], [9, 2, 1, "", "test_calculate_distance_between_points"]], "tests.numbers.test_geometric_algorithms.TestTriangleProperties": [[9, 2, 1, "", "test_is_triangle_rectangular"], [9, 2, 1, "", "test_is_triangle_valid"]], "tests.numbers.test_num_base_conversion": [[9, 1, 1, "", "TestBinaryHexadecimalConversion"], [9, 1, 1, "", "TestBinaryOctalConversion"], [9, 1, 1, "", "TestDecimalBinaryOctalConversion"], [9, 1, 1, "", "TestDecimalHexadecimalConversion"], [9, 1, 1, "", "TestOctalHexadecimalConversion"]], "tests.numbers.test_num_base_conversion.TestBinaryHexadecimalConversion": [[9, 2, 1, "", "conversion_binary_hex_parameters"], [9, 2, 1, "", "test_binary_to_hexadecimal"], [9, 2, 1, "", "test_hexadecimal_to_binary"]], "tests.numbers.test_num_base_conversion.TestBinaryOctalConversion": [[9, 2, 1, "", "conversion_binary_octal_parameters"], [9, 2, 1, "", "test_binary_to_octal"], [9, 2, 1, "", "test_octal_to_binary"]], "tests.numbers.test_num_base_conversion.TestDecimalBinaryOctalConversion": [[9, 2, 1, "", "conversion_decimal_any_parameters"], [9, 2, 1, "", "test_any_to_decimal"], [9, 2, 1, "", "test_any_to_decimal_with_uncorrect_base"], [9, 2, 1, "", "test_decimal_to_any"], [9, 2, 1, "", "test_decimal_to_any_with_uncorrect_base"]], "tests.numbers.test_num_base_conversion.TestDecimalHexadecimalConversion": [[9, 2, 1, "", "coversion_decimal_hex_parameters"], [9, 2, 1, "", "test_decimal_to_hexadecimal"], [9, 2, 1, "", "test_hexadecimal_to_decimal"]], "tests.numbers.test_num_base_conversion.TestOctalHexadecimalConversion": [[9, 2, 1, "", "conversion_octal_hex_parameters"], [9, 2, 1, "", "test_hexadecimal_to_octal"], [9, 2, 1, "", "test_octal_to_hexadecimal"]], "tests.numbers.test_primes": [[9, 1, 1, "", "TestErastothenesSieve"], [9, 1, 1, "", "TestPrimeFunctions"]], "tests.numbers.test_primes.TestErastothenesSieve": [[9, 2, 1, "", "setUpClass"], [9, 3, 1, "", "test_cases"], [9, 2, 1, "", "test_invalid_input_for_sieve_creation"], [9, 2, 1, "", "test_is_prime"], [9, 2, 1, "", "test_is_prime_with_number_out_of_range"]], "tests.numbers.test_primes.TestPrimeFunctions": [[9, 2, 1, "", "test_get_prime_factors"], [9, 2, 1, "", "test_get_prime_factors_with_invalid_input"], [9, 2, 1, "", "test_is_prime"]], "tests.strings": [[10, 0, 0, "-", "test_custom_string_sorting"], [10, 0, 0, "-", "test_string_analysis"], [10, 0, 0, "-", "test_string_manipulation"]], "tests.strings.test_custom_string_sorting": [[10, 1, 1, "", "TestSortItems"]], "tests.strings.test_custom_string_sorting.TestSortItems": [[10, 2, 1, "", "test_sort_items_with_compare_vowels_count_fn"], [10, 2, 1, "", "test_with_compare_chars_sum_fn"]], "tests.strings.test_string_analysis": [[10, 1, 1, "", "TestContainsDuplicates"], [10, 1, 1, "", "TestCountSubstringOccurences"], [10, 1, 1, "", "TestIsAnagram"], [10, 1, 1, "", "TestIsPangram"], [10, 1, 1, "", "TestPalindromeFunctions"], [10, 1, 1, "", "TestSubsequenceAndSubstring"]], "tests.strings.test_string_analysis.TestContainsDuplicates": [[10, 2, 1, "", "duplicate_elements"], [10, 2, 1, "", "test_with_duplicates"], [10, 2, 1, "", "test_with_unique_elements"], [10, 2, 1, "", "unique_elements"]], "tests.strings.test_string_analysis.TestCountSubstringOccurences": [[10, 2, 1, "", "test_substring_occurences"]], "tests.strings.test_string_analysis.TestIsAnagram": [[10, 3, 1, "", "test_cases"], [10, 2, 1, "", "test_is_anagram"]], "tests.strings.test_string_analysis.TestIsPangram": [[10, 2, 1, "", "test_is_pangram"]], "tests.strings.test_string_analysis.TestPalindromeFunctions": [[10, 2, 1, "", "test_palindrome_and_potential_palindrome"], [10, 2, 1, "", "test_potential_palindrome_but_not_actual_palindrome"]], "tests.strings.test_string_analysis.TestSubsequenceAndSubstring": [[10, 2, 1, "", "test_is_subsequence"], [10, 2, 1, "", "test_is_substring"], [10, 2, 1, "", "text_potential_subsequence_and_result"], [10, 2, 1, "", "text_potential_substring_and_result"]], "tests.strings.test_string_manipulation": [[10, 1, 1, "", "TestCompression"], [10, 1, 1, "", "TestCustomJoin"], [10, 1, 1, "", "TestReverse"]], "tests.strings.test_string_manipulation.TestCompression": [[10, 2, 1, "", "test_string_compression"]], "tests.strings.test_string_manipulation.TestCustomJoin": [[10, 2, 1, "", "test_when_any_element_is_not_string"], [10, 2, 1, "", "test_with_valid_data"], [10, 2, 1, "", "words_and_separator_fixture"]], "tests.strings.test_string_manipulation.TestReverse": [[10, 2, 1, "", "test_reverse_string"], [10, 3, 1, "", "words_for_reversal"]], "tests.test_sorting": [[7, 1, 1, "", "TestSortingAlgorithms"], [7, 1, 1, "", "TestSortingManager"]], "tests.test_sorting.TestSortingAlgorithms": [[7, 2, 1, "", "test_sorting"]], "tests.test_sorting.TestSortingManager": [[7, 2, 1, "", "test_perform_sorting"], [7, 2, 1, "", "test_set_sorting_strategy"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"]}, "titleterms": {"algorithm": [0, 1, 2, 3, 5, 6], "packag": [0, 1, 2, 3, 4, 7, 8, 9, 10], "subpackag": [0, 7], "submodul": [0, 1, 2, 3, 4, 7, 8, 9, 10], "sort": 0, "modul": [0, 1, 2, 3, 4, 7, 8, 9, 10], "content": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10], "cipher": [1, 8], "caesar": 1, "mors": 1, "vigener": 1, "number": [2, 9], "arithmetic_algorithm": 2, "digit": 2, "divisor": 2, "function_algorithm": 2, "geometric_algorithm": 2, "num_base_convers": 2, "prime": 2, "string": [3, 10], "custom_string_sort": 3, "string_analysi": 3, "string_manipul": 3, "data": 4, "randomm": 4, "user": 4, "valid": 4, "welcom": 5, "document": 5, "": 5, "indic": 5, "tabl": 5, "test": [7, 8, 9, 10], "conftest": 7, "test_sort": 7, "test_caesar": 8, "test_mors": 8, "test_vigener": 8, "test_arithmetic_algorithm": 9, "test_digit": 9, "test_divisor": 9, "test_function_algorithm": 9, "test_geometric_algorithm": 9, "test_num_base_convers": 9, "test_prim": 9, "test_custom_string_sort": 10, "test_string_analysi": 10, "test_string_manipul": 10}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"algorithms package": [[0, "algorithms-package"]], "Subpackages": [[0, "subpackages"], [7, "subpackages"]], "Submodules": [[0, "submodules"], [1, "submodules"], [2, "submodules"], [3, "submodules"], [4, "submodules"], [7, "submodules"], [8, "submodules"], [9, "submodules"], [10, "submodules"]], "algorithms.sorting module": [[0, "module-algorithms.sorting"]], "Module contents": [[0, "module-algorithms"], [1, "module-algorithms.ciphers"], [2, "module-algorithms.numbers"], [3, "module-algorithms.strings"], [4, "module-data"], [7, "module-tests"], [8, "module-tests.ciphers"], [9, "module-tests.numbers"], [10, "module-tests.strings"]], "algorithms.ciphers package": [[1, "algorithms-ciphers-package"]], "algorithms.ciphers.caesar module": [[1, "module-algorithms.ciphers.caesar"]], "algorithms.ciphers.morse module": [[1, "module-algorithms.ciphers.morse"]], "algorithms.ciphers.vigenere module": [[1, "module-algorithms.ciphers.vigenere"]], "algorithms.numbers package": [[2, "algorithms-numbers-package"]], "algorithms.numbers.arithmetic_algorithms module": [[2, "module-algorithms.numbers.arithmetic_algorithms"]], "algorithms.numbers.digits module": [[2, "module-algorithms.numbers.digits"]], "algorithms.numbers.divisors module": [[2, "module-algorithms.numbers.divisors"]], "algorithms.numbers.function_algorithms module": [[2, "module-algorithms.numbers.function_algorithms"]], "algorithms.numbers.geometric_algorithms module": [[2, "module-algorithms.numbers.geometric_algorithms"]], "algorithms.numbers.num_base_conversion module": [[2, "module-algorithms.numbers.num_base_conversion"]], "algorithms.numbers.primes module": [[2, "module-algorithms.numbers.primes"]], "algorithms.strings package": [[3, "algorithms-strings-package"]], "algorithms.strings.custom_string_sorting module": [[3, "module-algorithms.strings.custom_string_sorting"]], "algorithms.strings.string_analysis module": [[3, "module-algorithms.strings.string_analysis"]], "algorithms.strings.string_manipulation module": [[3, "module-algorithms.strings.string_manipulation"]], "data package": [[4, "data-package"]], "data.randomm module": [[4, "module-data.randomm"]], "data.user module": [[4, "module-data.user"]], "data.validation module": [[4, "module-data.validation"]], "Welcome to Algorithms Documentation\u2019s documentation!": [[5, "welcome-to-algorithms-documentation-s-documentation"]], "Contents:": [[5, null]], "Indices and tables": [[5, "indices-and-tables"]], "algorithms": [[6, "algorithms"]], "tests package": [[7, "tests-package"]], "tests.conftest module": [[7, "module-tests.conftest"]], "tests.test_sorting module": [[7, "module-tests.test_sorting"]], "tests.ciphers package": [[8, "tests-ciphers-package"]], "tests.ciphers.test_caesar module": [[8, "module-tests.ciphers.test_caesar"]], "tests.ciphers.test_morse module": [[8, "module-tests.ciphers.test_morse"]], "tests.ciphers.test_vigenere module": [[8, "module-tests.ciphers.test_vigenere"]], "tests.numbers package": [[9, "tests-numbers-package"]], "tests.numbers.test_arithmetic_algorithms module": [[9, "module-tests.numbers.test_arithmetic_algorithms"]], "tests.numbers.test_digits module": [[9, "module-tests.numbers.test_digits"]], "tests.numbers.test_divisors module": [[9, "module-tests.numbers.test_divisors"]], "tests.numbers.test_function_algorithms module": [[9, "module-tests.numbers.test_function_algorithms"]], "tests.numbers.test_geometric_algorithms module": [[9, "module-tests.numbers.test_geometric_algorithms"]], "tests.numbers.test_num_base_conversion module": [[9, "module-tests.numbers.test_num_base_conversion"]], "tests.numbers.test_primes module": [[9, "module-tests.numbers.test_primes"]], "tests.strings package": [[10, "tests-strings-package"]], "tests.strings.test_custom_string_sorting module": [[10, "module-tests.strings.test_custom_string_sorting"]], "tests.strings.test_string_analysis module": [[10, "module-tests.strings.test_string_analysis"]], "tests.strings.test_string_manipulation module": [[10, "module-tests.strings.test_string_manipulation"]]}, "indexentries": {"bubblesort (class in algorithms.sorting)": [[0, "algorithms.sorting.BubbleSort"]], "mergesort (class in algorithms.sorting)": [[0, "algorithms.sorting.MergeSort"]], "quicksort (class in algorithms.sorting)": [[0, "algorithms.sorting.QuickSort"]], "selectionsort (class in algorithms.sorting)": [[0, "algorithms.sorting.SelectionSort"]], "sorting (class in algorithms.sorting)": [[0, "algorithms.sorting.Sorting"]], "sortingmanager (class in algorithms.sorting)": [[0, "algorithms.sorting.SortingManager"]], "algorithms": [[0, "module-algorithms"]], "algorithms.sorting": [[0, "module-algorithms.sorting"]], "merge() (algorithms.sorting.mergesort static method)": [[0, "algorithms.sorting.MergeSort.merge"]], "module": [[0, "module-algorithms"], [0, "module-algorithms.sorting"], [1, "module-algorithms.ciphers"], [1, "module-algorithms.ciphers.caesar"], [1, "module-algorithms.ciphers.morse"], [1, "module-algorithms.ciphers.vigenere"], [2, "module-algorithms.numbers"], [2, "module-algorithms.numbers.arithmetic_algorithms"], [2, "module-algorithms.numbers.digits"], [2, "module-algorithms.numbers.divisors"], [2, "module-algorithms.numbers.function_algorithms"], [2, "module-algorithms.numbers.geometric_algorithms"], [2, "module-algorithms.numbers.num_base_conversion"], [2, "module-algorithms.numbers.primes"], [3, "module-algorithms.strings"], [3, "module-algorithms.strings.custom_string_sorting"], [3, "module-algorithms.strings.string_analysis"], [3, "module-algorithms.strings.string_manipulation"], [4, "module-data"], [4, "module-data.randomm"], [4, "module-data.user"], [4, "module-data.validation"], [7, "module-tests"], [7, "module-tests.conftest"], [7, "module-tests.test_sorting"], [8, "module-tests.ciphers"], [8, "module-tests.ciphers.test_caesar"], [8, "module-tests.ciphers.test_morse"], [8, "module-tests.ciphers.test_vigenere"], [9, "module-tests.numbers"], [9, "module-tests.numbers.test_arithmetic_algorithms"], [9, "module-tests.numbers.test_digits"], [9, "module-tests.numbers.test_divisors"], [9, "module-tests.numbers.test_function_algorithms"], [9, "module-tests.numbers.test_geometric_algorithms"], [9, "module-tests.numbers.test_num_base_conversion"], [9, "module-tests.numbers.test_primes"], [10, "module-tests.strings"], [10, "module-tests.strings.test_custom_string_sorting"], [10, "module-tests.strings.test_string_analysis"], [10, "module-tests.strings.test_string_manipulation"]], "perform_sorting() (algorithms.sorting.sortingmanager method)": [[0, "algorithms.sorting.SortingManager.perform_sorting"]], "set_sorting_strategy() (algorithms.sorting.sortingmanager method)": [[0, "algorithms.sorting.SortingManager.set_sorting_strategy"]], "sort() (algorithms.sorting.bubblesort method)": [[0, "algorithms.sorting.BubbleSort.sort"]], "sort() (algorithms.sorting.mergesort method)": [[0, "algorithms.sorting.MergeSort.sort"]], "sort() (algorithms.sorting.quicksort method)": [[0, "algorithms.sorting.QuickSort.sort"]], "sort() (algorithms.sorting.selectionsort method)": [[0, "algorithms.sorting.SelectionSort.sort"]], "sort() (algorithms.sorting.sorting method)": [[0, "algorithms.sorting.Sorting.sort"]], "sorting_strategy (algorithms.sorting.sortingmanager attribute)": [[0, "algorithms.sorting.SortingManager.sorting_strategy"]], "caesarcipher (class in algorithms.ciphers.caesar)": [[1, "algorithms.ciphers.caesar.CaesarCipher"]], "morsecipher (class in algorithms.ciphers.morse)": [[1, "algorithms.ciphers.morse.MorseCipher"]], "vigenerecipher (class in algorithms.ciphers.vigenere)": [[1, "algorithms.ciphers.vigenere.VigenereCipher"]], "algorithms.ciphers": [[1, "module-algorithms.ciphers"]], "algorithms.ciphers.caesar": [[1, "module-algorithms.ciphers.caesar"]], "algorithms.ciphers.morse": [[1, "module-algorithms.ciphers.morse"]], "algorithms.ciphers.vigenere": [[1, "module-algorithms.ciphers.vigenere"]], "decrypt() (algorithms.ciphers.morse.morsecipher method)": [[1, "algorithms.ciphers.morse.MorseCipher.decrypt"]], "decrypt() (algorithms.ciphers.vigenere.vigenerecipher method)": [[1, "algorithms.ciphers.vigenere.VigenereCipher.decrypt"]], "decrypt_text() (algorithms.ciphers.caesar.caesarcipher method)": [[1, "algorithms.ciphers.caesar.CaesarCipher.decrypt_text"]], "encrypt() (algorithms.ciphers.morse.morsecipher method)": [[1, "algorithms.ciphers.morse.MorseCipher.encrypt"]], "encrypt() (algorithms.ciphers.vigenere.vigenerecipher method)": [[1, "algorithms.ciphers.vigenere.VigenereCipher.encrypt"]], "encrypt_text() (algorithms.ciphers.caesar.caesarcipher method)": [[1, "algorithms.ciphers.caesar.CaesarCipher.encrypt_text"]], "key (algorithms.ciphers.vigenere.vigenerecipher attribute)": [[1, "algorithms.ciphers.vigenere.VigenereCipher.key"]], "morse_code (algorithms.ciphers.morse.morsecipher attribute)": [[1, "algorithms.ciphers.morse.MorseCipher.morse_code"]], "sequence (algorithms.ciphers.caesar.caesarcipher attribute)": [[1, "algorithms.ciphers.caesar.CaesarCipher.sequence"]], "shift (algorithms.ciphers.caesar.caesarcipher attribute)": [[1, "algorithms.ciphers.caesar.CaesarCipher.shift"]], "vigenere_generator (algorithms.ciphers.vigenere.vigenerecipher attribute)": [[1, "algorithms.ciphers.vigenere.VigenereCipher.vigenere_generator"]], "erastothenessieve (class in algorithms.numbers.primes)": [[2, "algorithms.numbers.primes.ErastothenesSieve"]], "point (class in algorithms.numbers.geometric_algorithms)": [[2, "algorithms.numbers.geometric_algorithms.Point"]], "algorithms.numbers": [[2, "module-algorithms.numbers"]], "algorithms.numbers.arithmetic_algorithms": [[2, "module-algorithms.numbers.arithmetic_algorithms"]], "algorithms.numbers.digits": [[2, "module-algorithms.numbers.digits"]], "algorithms.numbers.divisors": [[2, "module-algorithms.numbers.divisors"]], "algorithms.numbers.function_algorithms": [[2, "module-algorithms.numbers.function_algorithms"]], "algorithms.numbers.geometric_algorithms": [[2, "module-algorithms.numbers.geometric_algorithms"]], "algorithms.numbers.num_base_conversion": [[2, "module-algorithms.numbers.num_base_conversion"]], "algorithms.numbers.primes": [[2, "module-algorithms.numbers.primes"]], "any_to_decimal() (in module algorithms.numbers.num_base_conversion)": [[2, "algorithms.numbers.num_base_conversion.any_to_decimal"]], "are_points_collinear() (in module algorithms.numbers.geometric_algorithms)": [[2, "algorithms.numbers.geometric_algorithms.are_points_collinear"]], "babylonian_sqrt() (in module algorithms.numbers.arithmetic_algorithms)": [[2, "algorithms.numbers.arithmetic_algorithms.babylonian_sqrt"]], "binary_exponentiation() (in module algorithms.numbers.arithmetic_algorithms)": [[2, "algorithms.numbers.arithmetic_algorithms.binary_exponentiation"]], "binary_search() (in module algorithms.numbers.arithmetic_algorithms)": [[2, "algorithms.numbers.arithmetic_algorithms.binary_search"]], "binary_to_hexadecimal() (in module algorithms.numbers.num_base_conversion)": [[2, "algorithms.numbers.num_base_conversion.binary_to_hexadecimal"]], "binary_to_octal() (in module algorithms.numbers.num_base_conversion)": [[2, "algorithms.numbers.num_base_conversion.binary_to_octal"]], "bisection_root_finder() (in module algorithms.numbers.function_algorithms)": [[2, "algorithms.numbers.function_algorithms.bisection_root_finder"]], "count_comomon_divisors() (in module algorithms.numbers.divisors)": [[2, "algorithms.numbers.divisors.count_comomon_divisors"]], "count_divisors() (in module algorithms.numbers.divisors)": [[2, "algorithms.numbers.divisors.count_divisors"]], "decimal_to_any() (in module algorithms.numbers.num_base_conversion)": [[2, "algorithms.numbers.num_base_conversion.decimal_to_any"]], "decimal_to_hexadecimal() (in module algorithms.numbers.num_base_conversion)": [[2, "algorithms.numbers.num_base_conversion.decimal_to_hexadecimal"]], "distance_between_points() (in module algorithms.numbers.geometric_algorithms)": [[2, "algorithms.numbers.geometric_algorithms.distance_between_points"]], "get_digit() (in module algorithms.numbers.digits)": [[2, "algorithms.numbers.digits.get_digit"]], "get_prime_factors() (in module algorithms.numbers.primes)": [[2, "algorithms.numbers.primes.get_prime_factors"]], "hexadecimal_to_binary() (in module algorithms.numbers.num_base_conversion)": [[2, "algorithms.numbers.num_base_conversion.hexadecimal_to_binary"]], "hexadecimal_to_decimal() (in module algorithms.numbers.num_base_conversion)": [[2, "algorithms.numbers.num_base_conversion.hexadecimal_to_decimal"]], "hexadecimal_to_octal() (in module algorithms.numbers.num_base_conversion)": [[2, "algorithms.numbers.num_base_conversion.hexadecimal_to_octal"]], "horner_evaluation() (in module algorithms.numbers.function_algorithms)": [[2, "algorithms.numbers.function_algorithms.horner_evaluation"]], "is_perfect_number() (in module algorithms.numbers.primes)": [[2, "algorithms.numbers.primes.is_perfect_number"]], "is_prime() (algorithms.numbers.primes.erastothenessieve method)": [[2, "algorithms.numbers.primes.ErastothenesSieve.is_prime"]], "is_prime_basic() (in module algorithms.numbers.primes)": [[2, "algorithms.numbers.primes.is_prime_basic"]], "is_triangle_rectangular() (in module algorithms.numbers.geometric_algorithms)": [[2, "algorithms.numbers.geometric_algorithms.is_triangle_rectangular"]], "is_triangle_valid() (in module algorithms.numbers.geometric_algorithms)": [[2, "algorithms.numbers.geometric_algorithms.is_triangle_valid"]], "iterative_factorial() (in module algorithms.numbers.arithmetic_algorithms)": [[2, "algorithms.numbers.arithmetic_algorithms.iterative_factorial"]], "move_zeroes() (in module algorithms.numbers.digits)": [[2, "algorithms.numbers.digits.move_zeroes"]], "octal_to_binary() (in module algorithms.numbers.num_base_conversion)": [[2, "algorithms.numbers.num_base_conversion.octal_to_binary"]], "octal_to_hexadecimal() (in module algorithms.numbers.num_base_conversion)": [[2, "algorithms.numbers.num_base_conversion.octal_to_hexadecimal"]], "quadratic_roots_finder() (in module algorithms.numbers.function_algorithms)": [[2, "algorithms.numbers.function_algorithms.quadratic_roots_finder"]], "rectangle_integration() (in module algorithms.numbers.function_algorithms)": [[2, "algorithms.numbers.function_algorithms.rectangle_integration"]], "recursive_factorial() (in module algorithms.numbers.arithmetic_algorithms)": [[2, "algorithms.numbers.arithmetic_algorithms.recursive_factorial"]], "sum_digits() (in module algorithms.numbers.digits)": [[2, "algorithms.numbers.digits.sum_digits"]], "sum_divisors() (in module algorithms.numbers.divisors)": [[2, "algorithms.numbers.divisors.sum_divisors"]], "trapezoidal_integration() (in module algorithms.numbers.function_algorithms)": [[2, "algorithms.numbers.function_algorithms.trapezoidal_integration"]], "x (algorithms.numbers.geometric_algorithms.point attribute)": [[2, "algorithms.numbers.geometric_algorithms.Point.x"]], "y (algorithms.numbers.geometric_algorithms.point attribute)": [[2, "algorithms.numbers.geometric_algorithms.Point.y"]], "algorithms.strings": [[3, "module-algorithms.strings"]], "algorithms.strings.custom_string_sorting": [[3, "module-algorithms.strings.custom_string_sorting"]], "algorithms.strings.string_analysis": [[3, "module-algorithms.strings.string_analysis"]], "algorithms.strings.string_manipulation": [[3, "module-algorithms.strings.string_manipulation"]], "compare_chars_sum() (in module algorithms.strings.custom_string_sorting)": [[3, "algorithms.strings.custom_string_sorting.compare_chars_sum"]], "compare_vowels_count() (in module algorithms.strings.custom_string_sorting)": [[3, "algorithms.strings.custom_string_sorting.compare_vowels_count"]], "contains_duplicates() (in module algorithms.strings.string_analysis)": [[3, "algorithms.strings.string_analysis.contains_duplicates"]], "count_substring_occurences() (in module algorithms.strings.string_analysis)": [[3, "algorithms.strings.string_analysis.count_substring_occurences"]], "custom_join() (in module algorithms.strings.string_manipulation)": [[3, "algorithms.strings.string_manipulation.custom_join"]], "is_anagram() (in module algorithms.strings.string_analysis)": [[3, "algorithms.strings.string_analysis.is_anagram"]], "is_palindrome() (in module algorithms.strings.string_analysis)": [[3, "algorithms.strings.string_analysis.is_palindrome"]], "is_pangram() (in module algorithms.strings.string_analysis)": [[3, "algorithms.strings.string_analysis.is_pangram"]], "is_potential_palindrome() (in module algorithms.strings.string_analysis)": [[3, "algorithms.strings.string_analysis.is_potential_palindrome"]], "is_subsequence() (in module algorithms.strings.string_analysis)": [[3, "algorithms.strings.string_analysis.is_subsequence"]], "is_substring() (in module algorithms.strings.string_analysis)": [[3, "algorithms.strings.string_analysis.is_substring"]], "lower_string() (in module algorithms.strings.string_manipulation)": [[3, "algorithms.strings.string_manipulation.lower_string"]], "reverse_string() (in module algorithms.strings.string_manipulation)": [[3, "algorithms.strings.string_manipulation.reverse_string"]], "sort_items() (in module algorithms.strings.custom_string_sorting)": [[3, "algorithms.strings.custom_string_sorting.sort_items"]], "string_compression() (in module algorithms.strings.string_manipulation)": [[3, "algorithms.strings.string_manipulation.string_compression"]], "upper_string() (in module algorithms.strings.string_manipulation)": [[3, "algorithms.strings.string_manipulation.upper_string"]], "data": [[4, "module-data"]], "data.randomm": [[4, "module-data.randomm"]], "data.user": [[4, "module-data.user"]], "data.validation": [[4, "module-data.validation"]], "does_char_fall_within_range() (in module data.validation)": [[4, "data.validation.does_char_fall_within_range"]], "does_number_match_regex() (in module data.validation)": [[4, "data.validation.does_number_match_regex"]], "does_string_match_regex() (in module data.validation)": [[4, "data.validation.does_string_match_regex"]], "get_n_numbers() (in module data.user)": [[4, "data.user.get_n_numbers"]], "get_n_numbers_loop() (in module data.user)": [[4, "data.user.get_n_numbers_loop"]], "get_number() (in module data.user)": [[4, "data.user.get_number"]], "get_number_loop() (in module data.user)": [[4, "data.user.get_number_loop"]], "get_number_matches_regex() (in module data.user)": [[4, "data.user.get_number_matches_regex"]], "get_number_matches_regex_loop() (in module data.user)": [[4, "data.user.get_number_matches_regex_loop"]], "get_str() (in module data.user)": [[4, "data.user.get_str"]], "is_credit_card_valid() (in module data.validation)": [[4, "data.validation.is_credit_card_valid"]], "rand_chr() (in module data.randomm)": [[4, "data.randomm.rand_chr"]], "rand_chr_until() (in module data.randomm)": [[4, "data.randomm.rand_chr_until"]], "rand_n_numbers() (in module data.randomm)": [[4, "data.randomm.rand_n_numbers"]], "rand_n_numbers_until() (in module data.randomm)": [[4, "data.randomm.rand_n_numbers_until"]], "rand_number() (in module data.randomm)": [[4, "data.randomm.rand_number"]], "rand_number_until() (in module data.randomm)": [[4, "data.randomm.rand_number_until"]], "testsortingalgorithms (class in tests.test_sorting)": [[7, "tests.test_sorting.TestSortingAlgorithms"]], "testsortingmanager (class in tests.test_sorting)": [[7, "tests.test_sorting.TestSortingManager"]], "ge_0_number_and_expected_factorial_result() (in module tests.conftest)": [[7, "tests.conftest.ge_0_number_and_expected_factorial_result"]], "items_and_expected_sorted_items() (in module tests.conftest)": [[7, "tests.conftest.items_and_expected_sorted_items"]], "palindrome_and_potential_palindrome() (in module tests.conftest)": [[7, "tests.conftest.palindrome_and_potential_palindrome"]], "test_perform_sorting() (tests.test_sorting.testsortingmanager method)": [[7, "tests.test_sorting.TestSortingManager.test_perform_sorting"]], "test_set_sorting_strategy() (tests.test_sorting.testsortingmanager method)": [[7, "tests.test_sorting.TestSortingManager.test_set_sorting_strategy"]], "test_sorting() (tests.test_sorting.testsortingalgorithms method)": [[7, "tests.test_sorting.TestSortingAlgorithms.test_sorting"]], "tests": [[7, "module-tests"]], "tests.conftest": [[7, "module-tests.conftest"]], "tests.test_sorting": [[7, "module-tests.test_sorting"]], "testcaesarwithcustomshift (class in tests.ciphers.test_caesar)": [[8, "tests.ciphers.test_caesar.TestCaesarWithCustomShift"]], "testcaesarwithdefaultshift (class in tests.ciphers.test_caesar)": [[8, "tests.ciphers.test_caesar.TestCaesarWithDefaultShift"]], "testmorse (class in tests.ciphers.test_morse)": [[8, "tests.ciphers.test_morse.TestMorse"]], "testvigenerewithcustomkey2 (class in tests.ciphers.test_vigenere)": [[8, "tests.ciphers.test_vigenere.TestVigenereWithCustomKey2"]], "testvigenerewithdefaultkey2 (class in tests.ciphers.test_vigenere)": [[8, "tests.ciphers.test_vigenere.TestVigenereWithDefaultKey2"]], "morse_encoded_text() (tests.ciphers.test_morse.testmorse method)": [[8, "tests.ciphers.test_morse.TestMorse.morse_encoded_text"]], "setupclass() (tests.ciphers.test_caesar.testcaesarwithdefaultshift class method)": [[8, "tests.ciphers.test_caesar.TestCaesarWithDefaultShift.setUpClass"]], "setupclass() (tests.ciphers.test_vigenere.testvigenerewithdefaultkey2 class method)": [[8, "tests.ciphers.test_vigenere.TestVigenereWithDefaultKey2.setUpClass"]], "test_cases (tests.ciphers.test_caesar.testcaesarwithcustomshift attribute)": [[8, "tests.ciphers.test_caesar.TestCaesarWithCustomShift.test_cases"]], "test_cases (tests.ciphers.test_caesar.testcaesarwithdefaultshift attribute)": [[8, "tests.ciphers.test_caesar.TestCaesarWithDefaultShift.test_cases"]], "test_cases (tests.ciphers.test_vigenere.testvigenerewithcustomkey2 attribute)": [[8, "tests.ciphers.test_vigenere.TestVigenereWithCustomKey2.test_cases"]], "test_cases (tests.ciphers.test_vigenere.testvigenerewithdefaultkey2 attribute)": [[8, "tests.ciphers.test_vigenere.TestVigenereWithDefaultKey2.test_cases"]], "test_decrypt() (tests.ciphers.test_caesar.testcaesarwithcustomshift method)": [[8, "tests.ciphers.test_caesar.TestCaesarWithCustomShift.test_decrypt"]], "test_decrypt() (tests.ciphers.test_caesar.testcaesarwithdefaultshift method)": [[8, "tests.ciphers.test_caesar.TestCaesarWithDefaultShift.test_decrypt"]], "test_decrypt() (tests.ciphers.test_morse.testmorse method)": [[8, "tests.ciphers.test_morse.TestMorse.test_decrypt"]], "test_decrypt() (tests.ciphers.test_vigenere.testvigenerewithcustomkey2 method)": [[8, "tests.ciphers.test_vigenere.TestVigenereWithCustomKey2.test_decrypt"]], "test_decrypt() (tests.ciphers.test_vigenere.testvigenerewithdefaultkey2 method)": [[8, "tests.ciphers.test_vigenere.TestVigenereWithDefaultKey2.test_decrypt"]], "test_encrypt() (tests.ciphers.test_caesar.testcaesarwithdefaultshift method)": [[8, "tests.ciphers.test_caesar.TestCaesarWithDefaultShift.test_encrypt"]], "test_encrypt() (tests.ciphers.test_morse.testmorse method)": [[8, "tests.ciphers.test_morse.TestMorse.test_encrypt"]], "test_encrypt() (tests.ciphers.test_vigenere.testvigenerewithcustomkey2 method)": [[8, "tests.ciphers.test_vigenere.TestVigenereWithCustomKey2.test_encrypt"]], "test_encrypt() (tests.ciphers.test_vigenere.testvigenerewithdefaultkey2 method)": [[8, "tests.ciphers.test_vigenere.TestVigenereWithDefaultKey2.test_encrypt"]], "test_encypt() (tests.ciphers.test_caesar.testcaesarwithcustomshift method)": [[8, "tests.ciphers.test_caesar.TestCaesarWithCustomShift.test_encypt"]], "tests.ciphers": [[8, "module-tests.ciphers"]], "tests.ciphers.test_caesar": [[8, "module-tests.ciphers.test_caesar"]], "tests.ciphers.test_morse": [[8, "module-tests.ciphers.test_morse"]], "tests.ciphers.test_vigenere": [[8, "module-tests.ciphers.test_vigenere"]], "testbabyloniansqrt (class in tests.numbers.test_arithmetic_algorithms)": [[9, "tests.numbers.test_arithmetic_algorithms.TestBabylonianSqrt"]], "testbinaryexponentiation (class in tests.numbers.test_arithmetic_algorithms)": [[9, "tests.numbers.test_arithmetic_algorithms.TestBinaryExponentiation"]], "testbinaryhexadecimalconversion (class in tests.numbers.test_num_base_conversion)": [[9, "tests.numbers.test_num_base_conversion.TestBinaryHexadecimalConversion"]], "testbinaryoctalconversion (class in tests.numbers.test_num_base_conversion)": [[9, "tests.numbers.test_num_base_conversion.TestBinaryOctalConversion"]], "testbinarysearch (class in tests.numbers.test_arithmetic_algorithms)": [[9, "tests.numbers.test_arithmetic_algorithms.TestBinarySearch"]], "testbisectionrootfinder2 (class in tests.numbers.test_function_algorithms)": [[9, "tests.numbers.test_function_algorithms.TestBisectionRootFinder2"]], "testcountcommondivisors (class in tests.numbers.test_divisors)": [[9, "tests.numbers.test_divisors.TestCountCommonDivisors"]], "testcountdivisors (class in tests.numbers.test_divisors)": [[9, "tests.numbers.test_divisors.TestCountDivisors"]], "testdecimalbinaryoctalconversion (class in tests.numbers.test_num_base_conversion)": [[9, "tests.numbers.test_num_base_conversion.TestDecimalBinaryOctalConversion"]], "testdecimalhexadecimalconversion (class in tests.numbers.test_num_base_conversion)": [[9, "tests.numbers.test_num_base_conversion.TestDecimalHexadecimalConversion"]], "testerastothenessieve (class in tests.numbers.test_primes)": [[9, "tests.numbers.test_primes.TestErastothenesSieve"]], "testfactorials (class in tests.numbers.test_arithmetic_algorithms)": [[9, "tests.numbers.test_arithmetic_algorithms.TestFactorials"]], "testgetdigit (class in tests.numbers.test_digits)": [[9, "tests.numbers.test_digits.TestGetDigit"]], "testhornerevaluation (class in tests.numbers.test_function_algorithms)": [[9, "tests.numbers.test_function_algorithms.TestHornerEvaluation"]], "testintegration (class in tests.numbers.test_function_algorithms)": [[9, "tests.numbers.test_function_algorithms.TestIntegration"]], "testmovezeroes (class in tests.numbers.test_digits)": [[9, "tests.numbers.test_digits.TestMoveZeroes"]], "testoctalhexadecimalconversion (class in tests.numbers.test_num_base_conversion)": [[9, "tests.numbers.test_num_base_conversion.TestOctalHexadecimalConversion"]], "testpointsgeometrytester (class in tests.numbers.test_geometric_algorithms)": [[9, "tests.numbers.test_geometric_algorithms.TestPointsGeometryTester"]], "testprimefunctions (class in tests.numbers.test_primes)": [[9, "tests.numbers.test_primes.TestPrimeFunctions"]], "testquadraticrootsfinder (class in tests.numbers.test_function_algorithms)": [[9, "tests.numbers.test_function_algorithms.TestQuadraticRootsFinder"]], "testsumdigits (class in tests.numbers.test_digits)": [[9, "tests.numbers.test_digits.TestSumDigits"]], "testsumdivisors (class in tests.numbers.test_divisors)": [[9, "tests.numbers.test_divisors.TestSumDivisors"]], "testtriangleproperties (class in tests.numbers.test_geometric_algorithms)": [[9, "tests.numbers.test_geometric_algorithms.TestTriangleProperties"]], "conversion_binary_hex_parameters() (tests.numbers.test_num_base_conversion.testbinaryhexadecimalconversion method)": [[9, "tests.numbers.test_num_base_conversion.TestBinaryHexadecimalConversion.conversion_binary_hex_parameters"]], "conversion_binary_octal_parameters() (tests.numbers.test_num_base_conversion.testbinaryoctalconversion method)": [[9, "tests.numbers.test_num_base_conversion.TestBinaryOctalConversion.conversion_binary_octal_parameters"]], "conversion_decimal_any_parameters() (tests.numbers.test_num_base_conversion.testdecimalbinaryoctalconversion method)": [[9, "tests.numbers.test_num_base_conversion.TestDecimalBinaryOctalConversion.conversion_decimal_any_parameters"]], "conversion_octal_hex_parameters() (tests.numbers.test_num_base_conversion.testoctalhexadecimalconversion method)": [[9, "tests.numbers.test_num_base_conversion.TestOctalHexadecimalConversion.conversion_octal_hex_parameters"]], "coversion_decimal_hex_parameters() (tests.numbers.test_num_base_conversion.testdecimalhexadecimalconversion method)": [[9, "tests.numbers.test_num_base_conversion.TestDecimalHexadecimalConversion.coversion_decimal_hex_parameters"]], "linear_fn() (tests.numbers.test_function_algorithms.testbisectionrootfinder2 static method)": [[9, "tests.numbers.test_function_algorithms.TestBisectionRootFinder2.linear_fn"]], "linear_fn() (tests.numbers.test_function_algorithms.testintegration static method)": [[9, "tests.numbers.test_function_algorithms.TestIntegration.linear_fn"]], "number_accuracy_and_expected_sqrt_result() (tests.numbers.test_arithmetic_algorithms.testbabyloniansqrt method)": [[9, "tests.numbers.test_arithmetic_algorithms.TestBabylonianSqrt.number_accuracy_and_expected_sqrt_result"]], "number_and_divisor_count() (tests.numbers.test_divisors.testcountdivisors method)": [[9, "tests.numbers.test_divisors.TestCountDivisors.number_and_divisor_count"]], "number_and_expected_sqrt_result_with_default_accuracy() (tests.numbers.test_arithmetic_algorithms.testbabyloniansqrt method)": [[9, "tests.numbers.test_arithmetic_algorithms.TestBabylonianSqrt.number_and_expected_sqrt_result_with_default_accuracy"]], "number_and_expected_sum() (tests.numbers.test_digits.testsumdigits method)": [[9, "tests.numbers.test_digits.TestSumDigits.number_and_expected_sum"]], "numbers_and_expected_result_after_moving_zeroes() (tests.numbers.test_digits.testmovezeroes method)": [[9, "tests.numbers.test_digits.TestMoveZeroes.numbers_and_expected_result_after_moving_zeroes"]], "polynomial() (tests.numbers.test_function_algorithms.testbisectionrootfinder2 static method)": [[9, "tests.numbers.test_function_algorithms.TestBisectionRootFinder2.polynomial"]], "polynomial_fn() (tests.numbers.test_function_algorithms.testintegration static method)": [[9, "tests.numbers.test_function_algorithms.TestIntegration.polynomial_fn"]], "quadratic_fn() (tests.numbers.test_function_algorithms.testbisectionrootfinder2 static method)": [[9, "tests.numbers.test_function_algorithms.TestBisectionRootFinder2.quadratic_fn"]], "quadratic_fn() (tests.numbers.test_function_algorithms.testintegration static method)": [[9, "tests.numbers.test_function_algorithms.TestIntegration.quadratic_fn"]], "setup() (tests.numbers.test_divisors.testsumdivisors method)": [[9, "tests.numbers.test_divisors.TestSumDivisors.setUp"]], "setupclass() (tests.numbers.test_primes.testerastothenessieve class method)": [[9, "tests.numbers.test_primes.TestErastothenesSieve.setUpClass"]], "teardown() (tests.numbers.test_divisors.testsumdivisors method)": [[9, "tests.numbers.test_divisors.TestSumDivisors.tearDown"]], "test_any_to_decimal() (tests.numbers.test_num_base_conversion.testdecimalbinaryoctalconversion method)": [[9, "tests.numbers.test_num_base_conversion.TestDecimalBinaryOctalConversion.test_any_to_decimal"]], "test_any_to_decimal_with_uncorrect_base() (tests.numbers.test_num_base_conversion.testdecimalbinaryoctalconversion method)": [[9, "tests.numbers.test_num_base_conversion.TestDecimalBinaryOctalConversion.test_any_to_decimal_with_uncorrect_base"]], "test_are_points_collinear() (tests.numbers.test_geometric_algorithms.testpointsgeometrytester method)": [[9, "tests.numbers.test_geometric_algorithms.TestPointsGeometryTester.test_are_points_collinear"]], "test_binary_exponentiation() (tests.numbers.test_arithmetic_algorithms.testbinaryexponentiation method)": [[9, "tests.numbers.test_arithmetic_algorithms.TestBinaryExponentiation.test_binary_exponentiation"]], "test_binary_search() (tests.numbers.test_arithmetic_algorithms.testbinarysearch method)": [[9, "tests.numbers.test_arithmetic_algorithms.TestBinarySearch.test_binary_search"]], "test_binary_to_hexadecimal() (tests.numbers.test_num_base_conversion.testbinaryhexadecimalconversion method)": [[9, "tests.numbers.test_num_base_conversion.TestBinaryHexadecimalConversion.test_binary_to_hexadecimal"]], "test_binary_to_octal() (tests.numbers.test_num_base_conversion.testbinaryoctalconversion method)": [[9, "tests.numbers.test_num_base_conversion.TestBinaryOctalConversion.test_binary_to_octal"]], "test_calculate_distance_between_points() (tests.numbers.test_geometric_algorithms.testpointsgeometrytester method)": [[9, "tests.numbers.test_geometric_algorithms.TestPointsGeometryTester.test_calculate_distance_between_points"]], "test_cases (tests.numbers.test_function_algorithms.testbisectionrootfinder2 attribute)": [[9, "tests.numbers.test_function_algorithms.TestBisectionRootFinder2.test_cases"]], "test_cases (tests.numbers.test_function_algorithms.testintegration attribute)": [[9, "tests.numbers.test_function_algorithms.TestIntegration.test_cases"]], "test_cases (tests.numbers.test_primes.testerastothenessieve attribute)": [[9, "tests.numbers.test_primes.TestErastothenesSieve.test_cases"]], "test_correct_roots_calculation() (tests.numbers.test_function_algorithms.testquadraticrootsfinder method)": [[9, "tests.numbers.test_function_algorithms.TestQuadraticRootsFinder.test_correct_roots_calculation"]], "test_count_common_divisors() (tests.numbers.test_divisors.testcountcommondivisors method)": [[9, "tests.numbers.test_divisors.TestCountCommonDivisors.test_count_common_divisors"]], "test_decimal_to_any() (tests.numbers.test_num_base_conversion.testdecimalbinaryoctalconversion method)": [[9, "tests.numbers.test_num_base_conversion.TestDecimalBinaryOctalConversion.test_decimal_to_any"]], "test_decimal_to_any_with_uncorrect_base() (tests.numbers.test_num_base_conversion.testdecimalbinaryoctalconversion method)": [[9, "tests.numbers.test_num_base_conversion.TestDecimalBinaryOctalConversion.test_decimal_to_any_with_uncorrect_base"]], "test_decimal_to_hexadecimal() (tests.numbers.test_num_base_conversion.testdecimalhexadecimalconversion method)": [[9, "tests.numbers.test_num_base_conversion.TestDecimalHexadecimalConversion.test_decimal_to_hexadecimal"]], "test_get_digit() (tests.numbers.test_digits.testgetdigit method)": [[9, "tests.numbers.test_digits.TestGetDigit.test_get_digit"]], "test_get_prime_factors() (tests.numbers.test_primes.testprimefunctions method)": [[9, "tests.numbers.test_primes.TestPrimeFunctions.test_get_prime_factors"]], "test_get_prime_factors_with_invalid_input() (tests.numbers.test_primes.testprimefunctions method)": [[9, "tests.numbers.test_primes.TestPrimeFunctions.test_get_prime_factors_with_invalid_input"]], "test_hexadecimal_to_binary() (tests.numbers.test_num_base_conversion.testbinaryhexadecimalconversion method)": [[9, "tests.numbers.test_num_base_conversion.TestBinaryHexadecimalConversion.test_hexadecimal_to_binary"]], "test_hexadecimal_to_decimal() (tests.numbers.test_num_base_conversion.testdecimalhexadecimalconversion method)": [[9, "tests.numbers.test_num_base_conversion.TestDecimalHexadecimalConversion.test_hexadecimal_to_decimal"]], "test_hexadecimal_to_octal() (tests.numbers.test_num_base_conversion.testoctalhexadecimalconversion method)": [[9, "tests.numbers.test_num_base_conversion.TestOctalHexadecimalConversion.test_hexadecimal_to_octal"]], "test_integration() (tests.numbers.test_function_algorithms.testintegration method)": [[9, "tests.numbers.test_function_algorithms.TestIntegration.test_integration"]], "test_invalid_input_for_sieve_creation() (tests.numbers.test_primes.testerastothenessieve method)": [[9, "tests.numbers.test_primes.TestErastothenesSieve.test_invalid_input_for_sieve_creation"]], "test_is_prime() (tests.numbers.test_primes.testerastothenessieve method)": [[9, "tests.numbers.test_primes.TestErastothenesSieve.test_is_prime"]], "test_is_prime() (tests.numbers.test_primes.testprimefunctions method)": [[9, "tests.numbers.test_primes.TestPrimeFunctions.test_is_prime"]], "test_is_prime_with_number_out_of_range() (tests.numbers.test_primes.testerastothenessieve method)": [[9, "tests.numbers.test_primes.TestErastothenesSieve.test_is_prime_with_number_out_of_range"]], "test_is_triangle_rectangular() (tests.numbers.test_geometric_algorithms.testtriangleproperties method)": [[9, "tests.numbers.test_geometric_algorithms.TestTriangleProperties.test_is_triangle_rectangular"]], "test_is_triangle_valid() (tests.numbers.test_geometric_algorithms.testtriangleproperties method)": [[9, "tests.numbers.test_geometric_algorithms.TestTriangleProperties.test_is_triangle_valid"]], "test_iterative_with_ge_0_number() (tests.numbers.test_arithmetic_algorithms.testfactorials method)": [[9, "tests.numbers.test_arithmetic_algorithms.TestFactorials.test_iterative_with_ge_0_number"]], "test_iterative_with_negative_number() (tests.numbers.test_arithmetic_algorithms.testfactorials method)": [[9, "tests.numbers.test_arithmetic_algorithms.TestFactorials.test_iterative_with_negative_number"]], "test_move_zeroes() (tests.numbers.test_digits.testmovezeroes method)": [[9, "tests.numbers.test_digits.TestMoveZeroes.test_move_zeroes"]], "test_negative_numbers_divisors_sum_excluding_number() (tests.numbers.test_divisors.testsumdivisors method)": [[9, "tests.numbers.test_divisors.TestSumDivisors.test_negative_numbers_divisors_sum_excluding_number"]], "test_negative_numbers_divisors_sum_including_number() (tests.numbers.test_divisors.testsumdivisors method)": [[9, "tests.numbers.test_divisors.TestSumDivisors.test_negative_numbers_divisors_sum_including_number"]], "test_octal_to_binary() (tests.numbers.test_num_base_conversion.testbinaryoctalconversion method)": [[9, "tests.numbers.test_num_base_conversion.TestBinaryOctalConversion.test_octal_to_binary"]], "test_octal_to_hexadecimal() (tests.numbers.test_num_base_conversion.testoctalhexadecimalconversion method)": [[9, "tests.numbers.test_num_base_conversion.TestOctalHexadecimalConversion.test_octal_to_hexadecimal"]], "test_positive_numbers() (tests.numbers.test_divisors.testcountdivisors method)": [[9, "tests.numbers.test_divisors.TestCountDivisors.test_positive_numbers"]], "test_positive_numbers_divisors_sum_excluding_number() (tests.numbers.test_divisors.testsumdivisors method)": [[9, "tests.numbers.test_divisors.TestSumDivisors.test_positive_numbers_divisors_sum_excluding_number"]], "test_positive_numbers_divisors_sum_including_number() (tests.numbers.test_divisors.testsumdivisors method)": [[9, "tests.numbers.test_divisors.TestSumDivisors.test_positive_numbers_divisors_sum_including_number"]], "test_recursive_with_ge_0_number() (tests.numbers.test_arithmetic_algorithms.testfactorials method)": [[9, "tests.numbers.test_arithmetic_algorithms.TestFactorials.test_recursive_with_ge_0_number"]], "test_recursive_with_negative_number() (tests.numbers.test_arithmetic_algorithms.testfactorials method)": [[9, "tests.numbers.test_arithmetic_algorithms.TestFactorials.test_recursive_with_negative_number"]], "test_sum_digits() (tests.numbers.test_digits.testsumdigits method)": [[9, "tests.numbers.test_digits.TestSumDigits.test_sum_digits"]], "test_various_cases() (tests.numbers.test_function_algorithms.testhornerevaluation method)": [[9, "tests.numbers.test_function_algorithms.TestHornerEvaluation.test_various_cases"]], "test_when_a_coefficient_equals_0() (tests.numbers.test_function_algorithms.testquadraticrootsfinder method)": [[9, "tests.numbers.test_function_algorithms.TestQuadraticRootsFinder.test_when_a_coefficient_equals_0"]], "test_when_not_correct() (tests.numbers.test_function_algorithms.testbisectionrootfinder2 method)": [[9, "tests.numbers.test_function_algorithms.TestBisectionRootFinder2.test_when_not_correct"]], "test_when_number_equals_zero() (tests.numbers.test_divisors.testsumdivisors method)": [[9, "tests.numbers.test_divisors.TestSumDivisors.test_when_number_equals_zero"]], "test_with_correct_data() (tests.numbers.test_function_algorithms.testbisectionrootfinder2 method)": [[9, "tests.numbers.test_function_algorithms.TestBisectionRootFinder2.test_with_correct_data"]], "test_with_custom_accuracy() (tests.numbers.test_arithmetic_algorithms.testbabyloniansqrt method)": [[9, "tests.numbers.test_arithmetic_algorithms.TestBabylonianSqrt.test_with_custom_accuracy"]], "test_with_default_accuracy() (tests.numbers.test_arithmetic_algorithms.testbabyloniansqrt method)": [[9, "tests.numbers.test_arithmetic_algorithms.TestBabylonianSqrt.test_with_default_accuracy"]], "tests.numbers": [[9, "module-tests.numbers"]], "tests.numbers.test_arithmetic_algorithms": [[9, "module-tests.numbers.test_arithmetic_algorithms"]], "tests.numbers.test_digits": [[9, "module-tests.numbers.test_digits"]], "tests.numbers.test_divisors": [[9, "module-tests.numbers.test_divisors"]], "tests.numbers.test_function_algorithms": [[9, "module-tests.numbers.test_function_algorithms"]], "tests.numbers.test_geometric_algorithms": [[9, "module-tests.numbers.test_geometric_algorithms"]], "tests.numbers.test_num_base_conversion": [[9, "module-tests.numbers.test_num_base_conversion"]], "tests.numbers.test_primes": [[9, "module-tests.numbers.test_primes"]], "testcompression (class in tests.strings.test_string_manipulation)": [[10, "tests.strings.test_string_manipulation.TestCompression"]], "testcontainsduplicates (class in tests.strings.test_string_analysis)": [[10, "tests.strings.test_string_analysis.TestContainsDuplicates"]], "testcountsubstringoccurences (class in tests.strings.test_string_analysis)": [[10, "tests.strings.test_string_analysis.TestCountSubstringOccurences"]], "testcustomjoin (class in tests.strings.test_string_manipulation)": [[10, "tests.strings.test_string_manipulation.TestCustomJoin"]], "testisanagram (class in tests.strings.test_string_analysis)": [[10, "tests.strings.test_string_analysis.TestIsAnagram"]], "testispangram (class in tests.strings.test_string_analysis)": [[10, "tests.strings.test_string_analysis.TestIsPangram"]], "testpalindromefunctions (class in tests.strings.test_string_analysis)": [[10, "tests.strings.test_string_analysis.TestPalindromeFunctions"]], "testreverse (class in tests.strings.test_string_manipulation)": [[10, "tests.strings.test_string_manipulation.TestReverse"]], "testsortitems (class in tests.strings.test_custom_string_sorting)": [[10, "tests.strings.test_custom_string_sorting.TestSortItems"]], "testsubsequenceandsubstring (class in tests.strings.test_string_analysis)": [[10, "tests.strings.test_string_analysis.TestSubsequenceAndSubstring"]], "duplicate_elements() (tests.strings.test_string_analysis.testcontainsduplicates method)": [[10, "tests.strings.test_string_analysis.TestContainsDuplicates.duplicate_elements"]], "test_cases (tests.strings.test_string_analysis.testisanagram attribute)": [[10, "tests.strings.test_string_analysis.TestIsAnagram.test_cases"]], "test_is_anagram() (tests.strings.test_string_analysis.testisanagram method)": [[10, "tests.strings.test_string_analysis.TestIsAnagram.test_is_anagram"]], "test_is_pangram() (tests.strings.test_string_analysis.testispangram method)": [[10, "tests.strings.test_string_analysis.TestIsPangram.test_is_pangram"]], "test_is_subsequence() (tests.strings.test_string_analysis.testsubsequenceandsubstring method)": [[10, "tests.strings.test_string_analysis.TestSubsequenceAndSubstring.test_is_subsequence"]], "test_is_substring() (tests.strings.test_string_analysis.testsubsequenceandsubstring method)": [[10, "tests.strings.test_string_analysis.TestSubsequenceAndSubstring.test_is_substring"]], "test_palindrome_and_potential_palindrome() (tests.strings.test_string_analysis.testpalindromefunctions method)": [[10, "tests.strings.test_string_analysis.TestPalindromeFunctions.test_palindrome_and_potential_palindrome"]], "test_potential_palindrome_but_not_actual_palindrome() (tests.strings.test_string_analysis.testpalindromefunctions method)": [[10, "tests.strings.test_string_analysis.TestPalindromeFunctions.test_potential_palindrome_but_not_actual_palindrome"]], "test_reverse_string() (tests.strings.test_string_manipulation.testreverse method)": [[10, "tests.strings.test_string_manipulation.TestReverse.test_reverse_string"]], "test_sort_items_with_compare_vowels_count_fn() (tests.strings.test_custom_string_sorting.testsortitems method)": [[10, "tests.strings.test_custom_string_sorting.TestSortItems.test_sort_items_with_compare_vowels_count_fn"]], "test_string_compression() (tests.strings.test_string_manipulation.testcompression method)": [[10, "tests.strings.test_string_manipulation.TestCompression.test_string_compression"]], "test_substring_occurences() (tests.strings.test_string_analysis.testcountsubstringoccurences method)": [[10, "tests.strings.test_string_analysis.TestCountSubstringOccurences.test_substring_occurences"]], "test_when_any_element_is_not_string() (tests.strings.test_string_manipulation.testcustomjoin method)": [[10, "tests.strings.test_string_manipulation.TestCustomJoin.test_when_any_element_is_not_string"]], "test_with_compare_chars_sum_fn() (tests.strings.test_custom_string_sorting.testsortitems method)": [[10, "tests.strings.test_custom_string_sorting.TestSortItems.test_with_compare_chars_sum_fn"]], "test_with_duplicates() (tests.strings.test_string_analysis.testcontainsduplicates method)": [[10, "tests.strings.test_string_analysis.TestContainsDuplicates.test_with_duplicates"]], "test_with_unique_elements() (tests.strings.test_string_analysis.testcontainsduplicates method)": [[10, "tests.strings.test_string_analysis.TestContainsDuplicates.test_with_unique_elements"]], "test_with_valid_data() (tests.strings.test_string_manipulation.testcustomjoin method)": [[10, "tests.strings.test_string_manipulation.TestCustomJoin.test_with_valid_data"]], "tests.strings": [[10, "module-tests.strings"]], "tests.strings.test_custom_string_sorting": [[10, "module-tests.strings.test_custom_string_sorting"]], "tests.strings.test_string_analysis": [[10, "module-tests.strings.test_string_analysis"]], "tests.strings.test_string_manipulation": [[10, "module-tests.strings.test_string_manipulation"]], "text_potential_subsequence_and_result() (tests.strings.test_string_analysis.testsubsequenceandsubstring method)": [[10, "tests.strings.test_string_analysis.TestSubsequenceAndSubstring.text_potential_subsequence_and_result"]], "text_potential_substring_and_result() (tests.strings.test_string_analysis.testsubsequenceandsubstring method)": [[10, "tests.strings.test_string_analysis.TestSubsequenceAndSubstring.text_potential_substring_and_result"]], "unique_elements() (tests.strings.test_string_analysis.testcontainsduplicates method)": [[10, "tests.strings.test_string_analysis.TestContainsDuplicates.unique_elements"]], "words_and_separator_fixture() (tests.strings.test_string_manipulation.testcustomjoin method)": [[10, "tests.strings.test_string_manipulation.TestCustomJoin.words_and_separator_fixture"]], "words_for_reversal (tests.strings.test_string_manipulation.testreverse attribute)": [[10, "tests.strings.test_string_manipulation.TestReverse.words_for_reversal"]]}})